name: Deploy to ECR and EKS

on:
  push:
    branches: [main]

env:
  ECR_REPOSITORY: workflow
  AWS_REGION: us-east-1

jobs:
  build-and-deploy:
    name: Build, Push, and Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, Tag, and Push Docker image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: 1
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Get ECR Image URI
        id: ecr-image-uri
        run: echo "::set-output name=image-uri::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Configure kubectl
        run: aws eks --region ${{ env.AWS_REGION }} update-kubeconfig --name ekscluster

      - name: Deploy to EKS
        run: |
          sed -i "s|your-ecr-image-uri|${{ steps.ecr-image-uri.outputs.image-uri }}|" deployment.yaml
          kubectl get all
          kubectl apply -f deployment.yaml --validate=false
          kubectl expose deployment my-frontend-app --type=LoadBalancer --name=my-frontend-app-lb --port=80 --target-port=80
